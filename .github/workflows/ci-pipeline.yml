# .github/workflows/ci-pipeline.yml

name: Python and dbt CI

# This tells GitHub to run the workflow on every pull request to the 'main' branch
on:
  pull_request:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run in parallel or sequentially
jobs:
  build_and_test:
    # The type of virtual machine to run the job on
    runs-on: ubuntu-latest

    # These environment variables will be available to all steps
    env:
      # Your GCP Project ID. You can find this on the GCP Console homepage.
      GCP_PROJECT_ID: 'gs-arial' 
      
      # This tells dbt where the profiles file is. We point it to the one we created in Step 2.
      DBT_PROFILES_DIR: '.' 

    steps:
      # Step 1: Checks out a copy of your repository onto the runner
      - name: Check out repository
        uses: actions/checkout@v4

      # Step 2: Sets up a specific version of Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Step 2.5 - cache pip dependencies to speed up future runs
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          # This is the folder where pip stores packages
          path: ~/.cache/pip
          # The key identifies the cache. If requirements.txt changes, the key changes, creating a new cache.
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          # A fallback key
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 3: Install all needed libraries from your requirements file
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 # Install the linter
          
      # Step 4: Run the linter to check for Python code style issues
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      # ... other steps before

      - name: List Root Directory Contents
        run: find .

      # ... rest of the steps

      - name: Configure GCP Credentials
        env:
          # Assign the secret to an environment variable for this step
          GCP_CREDENTIALS_JSON: ${{ secrets.GCP_SA_KEY }}
        # Use printf to write the variable's content exactly as is
        run: printf '%s' "$GCP_CREDENTIALS_JSON" > dbt/Arial/gcp-credentials.json
        working-directory: dbt/Arial # This part is still needed if you removed it

      # Step 6: Install dbt packages
      - name: Install dbt packages
        run: dbt deps
        working-directory: dbt/Arial

      # Step 7: Run the dbt tests you created in ARIAL-17
      - name: Run dbt tests
        run: dbt test
        working-directory: dbt/Arial